<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1468.vcf4f5ee92395">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3990.vd281dd77a_388">
    <script>pipeline{
    agent any
    tools{
        jdk &apos;jdk17&apos;
        nodejs &apos;node16&apos;
    }
    environment {
        SCANNER_HOME=tool &apos;sonar-scanner&apos;
    }
    stages {
        stage(&apos;clean workspace&apos;){
            steps{
                cleanWs()
            }
        }
        stage(&apos;Checkout from Git&apos;){
            steps{
                git branch: &apos;main&apos;, url: &apos;https://github.com/N4si/DevSecOps-Project.git&apos;
            }
        }
        stage(&quot;Sonarqube Analysis &quot;){
            steps{
                withSonarQubeEnv(&apos;sonar-server&apos;) {
                    sh &apos;&apos;&apos; $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix &apos;&apos;&apos;
                }
            }
        }
        stage(&apos;Install Dependencies&apos;) {
            steps {
                sh &quot;npm install&quot;
            }
        }
        stage(&quot;Docker Build &amp; Push&quot;){
            steps{
                script{
                   withDockerRegistry(credentialsId: &apos;docker&apos;, toolName: &apos;docker&apos;){   
                       sh &quot;docker build --build-arg TMDB_V3_API_KEY=3c55a1ebbab3cba488a33d12d49e1400 -t netflix .&quot;
                       sh &quot;docker tag netflix ilyayyy/netflix:latest &quot;
                       sh &quot;docker push ilyayyy/netflix:latest &quot;
                    }
                }
            }
        }
        stage(&apos;Deploy to container&apos;){
            steps{
                sh &apos;docker run -d -p 8081:80 ilyayyy/netflix:latest&apos;
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>